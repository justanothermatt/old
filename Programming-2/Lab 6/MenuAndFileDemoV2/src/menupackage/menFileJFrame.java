/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package menupackage;
import java.io.*;
import javax.swing.JOptionPane; 

/**
 *
 * @author ID139
 */
public class menFileJFrame extends javax.swing.JFrame {
    private File inFile;
    private FileReader inputFileReader;
    private BufferedReader inputBuffer;
    private BufferedWriter outputBuffer;
    private javax.swing.JFileChooser fileChooser; 
    private Boolean thisBoolean = false;
    
    /**
     * Creates new form menFileJFrame
     */
    public menFileJFrame() {
        initComponents();
        
        // create our file chooser and apply the file filter
        fileChooser = new javax.swing.JFileChooser();
        
        fileChooser.setFileFilter(new TextFileFilter());
        
        displayTextArea.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        editText = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayTextArea.setColumns(20);
        displayTextArea.setLineWrap(true);
        displayTextArea.setRows(5);
        displayTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(displayTextArea);

        file.setText("File");

        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        file.add(openMenuItem);

        saveMenuItem.setText("Save...");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        file.add(saveMenuItem);
        file.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        file.add(exitMenuItem);

        jMenuBar1.add(file);

        edit.setText("Edit");

        editText.setText("Edit Text Enabled?");
        editText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTextActionPerformed(evt);
            }
        });
        edit.add(editText);

        jMenuBar1.add(edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // request that the user select a file to open
        int returnValue = fileChooser.showOpenDialog( null );
       
        // check to make sure that a selection was made - bail if not the case
        if ( returnValue != javax.swing.JFileChooser.APPROVE_OPTION ) return;

        // if here then user selected a file â€“ get the info and display the name
        inFile = fileChooser.getSelectedFile();
        displayTextArea.setText( null );
        this.setTitle( "TextReader: " + inFile.getName() );

        try {
            // open the file
            inputFileReader = new FileReader( inFile );
            inputBuffer = new BufferedReader( inputFileReader );
            String inputLine = null;

        // Read in the text one line at a time. readLine will return null
        // when there's nothing left to be read from the file
        while ( true ) {
        inputLine = inputBuffer.readLine();
        if ( inputLine == null ) break;

        // if here, then append the latest line to the textarea
        displayTextArea.append( inputLine + "\n" );
     }

        // As all of the file has now been processed, close the resource.
        inputBuffer.close();
}

 // error handling routine for try block - won't try to recover;
 // instead, report the error and bail out...
 catch ( IOException e ) {
 String errorMsg = "Fatal error: " + e.toString();
 javax.swing.JOptionPane.showConfirmDialog( this, errorMsg );
 System.exit( 1 );
 }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void editTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTextActionPerformed
        thisBoolean = !thisBoolean;
        
        if (thisBoolean == true){
            displayTextArea.setEnabled(true);
        }
        
        else
            displayTextArea.setEnabled(false);
    }//GEN-LAST:event_editTextActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // have the user select a filename and location for the save operation
        // bail if the user somehow cancels...
    int returnValue = fileChooser.showSaveDialog( null );
    if ( returnValue != javax.swing.JFileChooser.APPROVE_OPTION ) return;

     // if it is the same file as that being displayed,
    // then confirm the overwrite operation
    File outFile = fileChooser.getSelectedFile();
    if ( outFile.equals( inFile ) ) {
    int result = JOptionPane.showConfirmDialog(this, "Do you wish to overwrite the current file?" );
    if ( result != JOptionPane.YES_OPTION ) return;
 }

    // open the output file for writing, dump the contents of the text area,
    // then close the file
    try {
        outputBuffer = new BufferedWriter( new FileWriter( outFile ) );
    outputBuffer.write( displayTextArea.getText() );
    outputBuffer.close();
 }
    catch ( IOException e ) {
    JOptionPane.showMessageDialog( null, "IO Exception: " + e );
    System.exit(1);
 } 
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menFileJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menFileJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menFileJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menFileJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menFileJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JMenu edit;
    private javax.swing.JCheckBoxMenuItem editText;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu file;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
}
