/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package foo;

import java.util.*;
import javax.swing.*;
import java.awt.*;

/**
 *
 * @author ID139
 */
public class SketchPanel extends javax.swing.JPanel {

private final java.util.List itemsToDraw = new ArrayList();
private Color penColor;

public int itemType = DrawItem.FREEHAND;

    /**
     * Creates new form SketchPanel
     */
    public SketchPanel() {
        initComponents();
        this.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        setBackground(new java.awt.Color(255,255,255));
        this.penColor = Color.BLACK;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(400, 400));
        setMinimumSize(new java.awt.Dimension(400, 400));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        DrawItem currentItem = (DrawItem) itemsToDraw.get(itemsToDraw.size() - 1);
        currentItem.add(evt.getPoint());
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        switch(getItemType()){
            case DrawItem.FREEHAND:
                itemsToDraw.add(new Freehand(evt.getPoint(), penColor));
                break;
            case DrawItem.LINE:
                //itemsToDraw.add(new Line(evt.getPoint(), penColor));
                break;
        }
    }//GEN-LAST:event_formMousePressed
    
    public void setPenColor(Color thisColor){
        this.penColor = thisColor;
    }
    
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        
        Iterator setOfItems = itemsToDraw.iterator();
        
        while(setOfItems.hasNext()){
            DrawItem thisItem = (DrawItem) setOfItems.next();
            g.setColor(thisItem.getItemColor());
            thisItem.draw(g);
            }
        }
    
    public void clear(){
        itemsToDraw.clear();
    }
    
    public int getItemType(){
        return itemType;
    }
    
    public void setItemType(int itemType){
        this.itemType = itemType;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
