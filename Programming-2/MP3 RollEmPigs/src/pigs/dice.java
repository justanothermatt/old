/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pigs;

import javax.swing.JLabel;
import java.util.Random;
import javax.swing.*;
import java.awt.event.*;

/**
 *
 * @author Matt Walker
 */
public class dice extends JLabel {
    
    // instance data members for use with animating the die
    private boolean             isDieAnimated       = true; // assume that user wants animated die
    private final static int    DELAY               = 200;  // time between successive images in ms
    private final static int    FRAME_COUNT_MAX     = 9;    // maximum number of frames to show
    private final static int    FRAME_COUNT_MIN     = 5;    // minimum number of frames to show
    private int                 frameCount          = 0;    // current frame count
    private int                 frameCountLimit     = 0;    // total frames to show for an animation
    private Timer               animationTimer;             // animation actionEvent generator

    // instance data members for use with the playability of the die
    private Random          rand                = new Random();
    private int             dieValue            = 6;
    private final int       NUMBER_OF_SIDES     = 6;
    private ImageIcon[]     dieImage            = new ImageIcon[ NUMBER_OF_SIDES + 1 ];
    
    /**
     * Creates new form dice
     */
    public dice() {
        initComponents();
        for ( int i = 1; i <= NUMBER_OF_SIDES; i++ ) {
            String filename = "/images/die" + i + ".gif";
            dieImage[i] = new ImageIcon( this.getClass().getResource(filename) );
        }
        // set up our animation timer
        animationTimer = new Timer( DELAY, new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
         animationTimerActionPerformed(evt);
         }
        });
        // counters are used to control the number of times the Timer repeats...
        animationTimer.setRepeats( false ); 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/die6.gif"))); // NOI18N
        setVerticalAlignment(javax.swing.SwingConstants.TOP);
    }// </editor-fold>//GEN-END:initComponents
    
    private void animationTimerActionPerformed( java.awt.event.ActionEvent evt ) {
        frameCount++; // increment our animation frame counter
        // if we reached our limit, display the true value and restore mouse events;
        // otherwise, show some random value...
        if ( frameCount < frameCountLimit ) {
        int value = rand.nextInt( NUMBER_OF_SIDES ) + 1;
        this.setIcon( dieImage[ value ] );
        animationTimer.start();
        }
        else {
        this.setIcon( dieImage[ dieValue ]);
        }
    } 
    
    public void setAnimation( boolean animationState ) {
        isDieAnimated = animationState;
        }

        public boolean isAnimated() {
        return isDieAnimated;
    } 
    
    public int rollDie() {

        // initialize the frame counting variables for this roll
        frameCount = 0;
        int range = FRAME_COUNT_MAX - FRAME_COUNT_MIN + 1;
        frameCountLimit = FRAME_COUNT_MIN + rand.nextInt( range );

        // "roll" the die and start the animation if we're to do so
        dieValue = rand.nextInt( NUMBER_OF_SIDES ) + 1;
        if ( isDieAnimated ) { animationTimer.start(); }
        else { setIcon( dieImage[ dieValue ] ); }

        return dieValue;
    }
    
    
    /*
    public int rollDie() {
        dieValue = rand.nextInt( NUMBER_OF_SIDES ) + 1;
        setIcon( dieImage[ dieValue ] );
        return dieValue;
    }*/
    public int getDieValue() {
    // add appropriate code to return the value of the die here
        return dieValue;
    }
    
    public boolean setDieValue( int value ) {
     // add appropriate code to verify the correctness of the value passed
     // if it is out of range then return false
     // otherwise, set the value and the image as appropriate and
     // return true
        if(value < 1 || value > 6)
            return false;
        else{
            dieValue = value;
            setIcon( dieImage[ dieValue ] );
            return true;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
